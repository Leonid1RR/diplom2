const express = require('express');
const { PrismaClient } = require('@prisma/client');
const bodyParser = require('body-parser');
const cors = require('cors');
const PDFDocument = require('pdfkit');

const prisma = new PrismaClient();
const app = express();

app.use(cors());
app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ limit: '50mb', extended: true }));

// -------------------- –ù–ê–ö–õ–ê–î–ù–´–ï PDF –° –ü–û–î–î–ï–†–ñ–ö–û–ô –†–£–°–°–ö–û–ì–û –Ø–ó–´–ö–ê --------------------
app.get('/api/supplies/:id/invoice', async (req, res) => {
  try {
    const { id } = req.params;
    
    console.log('üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏:', id);
    
    const supply = await prisma.supply.findUnique({
      where: { id: parseInt(id) },
      include: {
        fromSupplier: true,
        toStore: true
      }
    });

    if (!supply) {
      return res.status(404).json({ error: '–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    let orderData;
    try {
      orderData = JSON.parse(supply.content);
    } catch (e) {
      orderData = {
        batchName: '–¢–æ–≤–∞—Ä –∏–∑ –ø–æ—Å—Ç–∞–≤–∫–∏',
        description: supply.content,
        quantity: 1,
        itemsPerBatch: 1,
        totalPrice: 0,
        expiration: 30
      };
    }

    // –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
    const doc = new PDFDocument({
      margins: {
        top: 50,
        bottom: 50,
        left: 50,
        right: 50
      }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="invoice-${supply.id}.pdf"`);
    
    // –ü–∞–π–ø–∏–º –æ—Ç–≤–µ—Ç
    doc.pipe(res);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã PDF –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    doc.font('fonts/arial.ttf');

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc.fontSize(20)
       .text('–ù–ê–ö–õ–ê–î–ù–ê–Ø', 50, 50, { align: 'center' });
    
    doc.fontSize(12)
       .text(`‚Ññ ${supply.id}-${Date.now()}`, 50, 80, { align: 'center' });
    
    const currentDate = new Date().toLocaleDateString('ru-RU');
    doc.text(`–î–∞—Ç–∞: ${currentDate}`, 50, 100, { align: 'center' });
    
    doc.moveDown(2);

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
    doc.fontSize(14)
       .text('–ü–û–°–¢–ê–í–©–ò–ö:', 50, 150);
    
    doc.moveDown(0.5);
    
    doc.fontSize(10)
       .text(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${supply.fromSupplier.name}`, 50, 170);
    doc.text(`–ê–¥—Ä–µ—Å: ${supply.fromSupplier.address}`, 50, 185);
    doc.text(`–û–ø–∏—Å–∞–Ω–∏–µ: ${supply.fromSupplier.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`, 50, 200);
    
    doc.moveDown(1);

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
    doc.fontSize(14)
       .text('–ü–û–õ–£–ß–ê–¢–ï–õ–¨:', 50, 240);
    
    doc.moveDown(0.5);
    
    doc.fontSize(10)
       .text(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${supply.toStore.name}`, 50, 260);
    doc.text(`–ê–¥—Ä–µ—Å: ${supply.toStore.address}`, 50, 275);
    doc.text(`–û–ø–∏—Å–∞–Ω–∏–µ: ${supply.toStore.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`, 50, 290);
    
    doc.moveDown(1);

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤–∫–µ
    doc.fontSize(14)
       .text('–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–°–¢–ê–í–ö–ï:', 50, 330);
    
    doc.moveDown(0.5);
    
    doc.fontSize(10)
       .text(`–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${supply.id}`, 50, 350);
    doc.text(`–°—Ç–∞—Ç—É—Å: ${supply.status}`, 50, 365);
    
    const createdDate = supply.createdAt ? new Date(supply.createdAt).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    doc.text(`–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ${createdDate}`, 50, 380);
    doc.text(`–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: ${currentDate}`, 50, 395);
    
    doc.moveDown(1);

    // –¢–æ–≤–∞—Ä–Ω–∞—è —á–∞—Å—Ç—å
    doc.fontSize(14)
       .text('–¢–û–í–ê–†–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:', 50, 430);
    
    doc.moveDown(0.5);
    
    doc.fontSize(10)
       .text(`–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${orderData.batchName || '–¢–æ–≤–∞—Ä –∏–∑ –ø–æ—Å—Ç–∞–≤–∫–∏'}`, 50, 450);
    doc.text(`–û–ø–∏—Å–∞–Ω–∏–µ: ${orderData.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`, 50, 465);
    doc.text(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–∏–π: ${orderData.quantity || 1}`, 50, 480);
    doc.text(`–ï–¥–∏–Ω–∏—Ü –≤ –ø–∞—Ä—Ç–∏–∏: ${orderData.itemsPerBatch || 1}`, 50, 495);
    doc.text(`–í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: ${(orderData.quantity || 1) * (orderData.itemsPerBatch || 1)}`, 50, 510);
    doc.text(`–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: ${orderData.expiration || 30} –¥–Ω–µ–π`, 50, 525);
    doc.text(`–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${orderData.totalPrice || 0} —Ä—É–±.`, 50, 540);
    
    doc.moveDown(2);

    // –ü–æ–¥–ø–∏—Å–∏
    const signatureY = 580;
    doc.fontSize(12)
       .text('–ü–û–î–ü–ò–°–ò –ò –ü–ï–ß–ê–¢–ò:', 50, signatureY);
    
    doc.fontSize(10)
       .text('___________________', 50, signatureY + 20)
       .text('___________________', 300, signatureY + 20);
    
    doc.text(`${supply.fromSupplier.name}`, 50, signatureY + 35)
       .text(`${supply.toStore.name}`, 300, signatureY + 35);
    
    doc.text('(–ü–æ—Å—Ç–∞–≤—â–∏–∫)', 50, signatureY + 50)
       .text('(–ü–æ–ª—É—á–∞—Ç–µ–ª—å)', 300, signatureY + 50);

    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    doc.moveTo(50, signatureY + 70)
       .lineTo(550, signatureY + 70)
       .stroke();

    // –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
    doc.fontSize(10)
       .text('–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:', 50, signatureY + 85)
       .text('1. –¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ –∏ –Ω–∞–¥–ª–µ–∂–∞—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.', 50, signatureY + 100)
       .text('2. –ü—Ä–µ—Ç–µ–Ω–∑–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ –∫–∞—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–∞ –Ω–µ –∏–º–µ—é—Ç—Å—è.', 50, signatureY + 115);


    doc.end();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –Ω–∞–∫–ª–∞–¥–Ω–æ–π:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
  }
});

// -------------------- –ú–ê–ì–ê–ó–ò–ù–´ --------------------
app.get('/stores', async (req, res) => {
  try {
    const stores = await prisma.store.findMany({ 
      include: { 
        warehouse: true, 
        supplies: true,
        reviews: true 
      } 
    });
    res.json(stores);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/stores', async (req, res) => {
  try {
    const { name, password, address, description, photo } = req.body;
    
    if (!name || !password || !address) {
      return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ, –ø–∞—Ä–æ–ª—å –∏ –∞–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const store = await prisma.store.create({
      data: { 
        name, 
        password, 
        address, 
        description: description || '', 
        photo: photo || null,
        warehouse: {
          create: {
            productCount: 0
          }
        }
      },
      include: {
        warehouse: true
      }
    });

    res.json(store);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.put('/stores/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { name, password, address, description, photo } = req.body;
    
    const updated = await prisma.store.update({
      where: { id: parseInt(id) },
      data: { 
        name, 
        password, 
        address, 
        description, 
        photo 
      },
    });
    res.json(updated);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.delete('/stores/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await prisma.store.delete({ where: { id: parseInt(id) } });
    res.json(deleted);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// -------------------- –°–ö–õ–ê–î–´ --------------------
app.get('/warehouses', async (req, res) => {
  try {
    const warehouses = await prisma.warehouse.findMany({ 
      include: { 
        store: true, 
        products: {
          include: {
            product: true
          }
        }
      } 
    });
    res.json(warehouses);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –º–∞–≥–∞–∑–∏–Ω–∞
app.get('/warehouses/store/:storeId', async (req, res) => {
  try {
    const { storeId } = req.params;
    
    console.log('üîß –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞:', storeId);

    const storeIdNum = parseInt(storeId);
    if (isNaN(storeIdNum)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –º–∞–≥–∞–∑–∏–Ω–∞' });
    }

    const warehouse = await prisma.warehouse.findFirst({
      where: { storeId: storeIdNum },
      include: { 
        products: {
          include: {
            product: true
          }
        },
        store: true
      }
    });

    if (!warehouse) {
      console.log('‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞:', storeId);
      return res.status(404).json({ error: '–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    console.log('‚úÖ –°–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω —Å —Ç–æ–≤–∞—Ä–∞–º–∏:', warehouse.products.length);
    res.json(warehouse);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥ –º–∞–≥–∞–∑–∏–Ω–∞
app.post('/warehouses/:storeId/products', async (req, res) => {
  try {
    const { storeId } = req.params;
    const { name, description, expiration, price, photo } = req.body;
    
    console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥ –º–∞–≥–∞–∑–∏–Ω–∞:', storeId);

    if (!name) {
      return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    const storeIdNum = parseInt(storeId);
    if (isNaN(storeIdNum)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –º–∞–≥–∞–∑–∏–Ω–∞' });
    }

    const warehouse = await prisma.warehouse.findFirst({
      where: { storeId: storeIdNum }
    });

    console.log('üîß –ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥:', warehouse);

    if (!warehouse) {
      return res.status(404).json({ error: '–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞' });
    }

    const result = await prisma.$transaction(async (prisma) => {
      const product = await prisma.product.create({
        data: { 
          name, 
          description: description || '', 
          expiration: parseInt(expiration) || 30, 
          price: parseFloat(price) || 0, 
          photo: photo || null 
        },
      });

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä:', product);

      const productOnWarehouse = await prisma.productOnWarehouse.create({
        data: {
          productId: product.id,
          warehouseId: warehouse.id,
        },
        include: {
          product: true,
          warehouse: true
        }
      });

      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥:', productOnWarehouse);

      const updatedWarehouse = await prisma.warehouse.update({
        where: { id: warehouse.id },
        data: {
          productCount: {
            increment: 1
          }
        }
      });

      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:', updatedWarehouse.productCount);

      return product;
    });

    res.json(result);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
  }
});

app.post('/warehouses', async (req, res) => {
  try {
    const { storeId, productCount } = req.body;
    
    if (!storeId) {
      return res.status(400).json({ error: 'storeId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const warehouse = await prisma.warehouse.create({
      data: { 
        storeId: parseInt(storeId), 
        productCount: productCount || 0 
      },
    });
    res.json(warehouse);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫–ª–∞–¥–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.put('/warehouses/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { storeId, productCount } = req.body;
    
    const updated = await prisma.warehouse.update({
      where: { id: parseInt(id) },
      data: { 
        storeId: parseInt(storeId), 
        productCount 
      },
    });
    res.json(updated);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.delete('/warehouses/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await prisma.warehouse.delete({ where: { id: parseInt(id) } });
    res.json(deleted);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// -------------------- –¢–û–í–ê–†–´ --------------------
app.get('/products', async (req, res) => {
  try {
    const products = await prisma.product.findMany({ 
      include: { 
        warehouses: {
          include: {
            warehouse: true
          }
        }
      } 
    });
    res.json(products);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/products', async (req, res) => {
  try {
    const { name, description, expiration, price, photo } = req.body;
    
    if (!name) {
      return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    const product = await prisma.product.create({
      data: { 
        name, 
        description: description || '', 
        expiration: expiration || 0, 
        price: price || 0, 
        photo: photo || null 
      },
    });
    res.json(product);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.put('/products/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { name, description, expiration, price, photo } = req.body;
    
    const updated = await prisma.product.update({
      where: { id: parseInt(id) },
      data: { 
        name, 
        description, 
        expiration, 
        price, 
        photo 
      },
    });
    res.json(updated);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.delete('/products/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await prisma.product.delete({ where: { id: parseInt(id) } });
    res.json(deleted);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// -------------------- –ü–û–°–¢–ê–í–©–ò–ö–ò --------------------
app.get('/suppliers', async (req, res) => {
  try {
    const suppliers = await prisma.supplier.findMany({ 
      include: { 
        batches: true, 
        supplies: true,
        reviews: true 
      } 
    });
    res.json(suppliers);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/suppliers', async (req, res) => {
  try {
    const { name, password, address, description, batchCount, photo } = req.body;
    
    if (!name || !password || !address) {
      return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ, –ø–∞—Ä–æ–ª—å –∏ –∞–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const supplier = await prisma.supplier.create({
      data: { 
        name, 
        password, 
        address, 
        description: description || '', 
        photo: photo || null,
        batchCount: batchCount || 0
      },
    });
    res.json(supplier);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.put('/suppliers/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { name, password, address, description, batchCount, photo } = req.body;
    
    const updated = await prisma.supplier.update({
      where: { id: parseInt(id) },
      data: { 
        name, 
        password, 
        address, 
        description, 
        batchCount,
        photo 
      },
    });
    res.json(updated);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.delete('/suppliers/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await prisma.supplier.delete({ where: { id: parseInt(id) } });
    res.json(deleted);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// -------------------- –ü–ê–†–¢–ò–ò –¢–û–í–ê–†–û–í --------------------
app.get('/batches', async (req, res) => {
  try {
    const batches = await prisma.productBatch.findMany({ 
      include: { 
        supplier: true 
      } 
    });
    res.json(batches);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä—Ç–∏–π:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/batches', async (req, res) => {
  try {
    const { name, description, expiration, price, photo, productCount, supplierId } = req.body;
    
    if (!name || !supplierId) {
      return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ supplierId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const batch = await prisma.productBatch.create({
      data: { 
        name, 
        description: description || '', 
        expiration: expiration || 0, 
        price: price || 0, 
        photo: photo || null, 
        productCount: productCount || 1, 
        supplierId: parseInt(supplierId) 
      },
    });
    res.json(batch);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.put('/batches/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { name, description, expiration, price, photo, productCount, supplierId } = req.body;
    
    const updated = await prisma.productBatch.update({
      where: { id: parseInt(id) },
      data: { 
        name, 
        description, 
        expiration, 
        price, 
        photo, 
        productCount, 
        supplierId: parseInt(supplierId) 
      },
    });
    res.json(updated);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.delete('/batches/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await prisma.productBatch.delete({ where: { id: parseInt(id) } });
    res.json(deleted);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// -------------------- –ü–û–°–¢–ê–í–ö–ò --------------------
app.get('/supplies', async (req, res) => {
  try {
    const supplies = await prisma.supply.findMany({ 
      include: { 
        fromSupplier: true, 
        toStore: true 
      } 
    });
    res.json(supplies);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–æ–∫:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/supplies', async (req, res) => {
  try {
    const { fromSupplierId, toStoreId, content, status } = req.body;
    
    if (!fromSupplierId || !toStoreId) {
      return res.status(400).json({ error: 'fromSupplierId –∏ toStoreId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const supply = await prisma.supply.create({
      data: { 
        fromSupplierId: parseInt(fromSupplierId), 
        toStoreId: parseInt(toStoreId), 
        content: content || '', 
        status: status || '–æ—Ñ–æ—Ä–º–ª–µ–Ω' 
      },
    });
    res.json(supply);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–∫–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.put('/supplies/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { fromSupplierId, toStoreId, content, status } = req.body;
    
    const updated = await prisma.supply.update({
      where: { id: parseInt(id) },
      data: { 
        fromSupplierId: parseInt(fromSupplierId), 
        toStoreId: parseInt(toStoreId), 
        content, 
        status 
      },
    });
    res.json(updated);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–∫–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.delete('/supplies/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await prisma.supply.delete({ where: { id: parseInt(id) } });
    res.json(deleted);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–∫–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// -------------------- –û–¢–ó–´–í–´ --------------------
app.get('/reviews', async (req, res) => {
  try {
    const reviews = await prisma.review.findMany({ 
      include: { 
        fromStore: true, 
        toSupplier: true 
      } 
    });
    res.json(reviews);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/reviews/supplier/:supplierId', async (req, res) => {
  try {
    const { supplierId } = req.params;
    const reviews = await prisma.review.findMany({
      where: { toSupplierId: parseInt(supplierId) },
      include: { fromStore: true }
    });
    res.json(reviews);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/reviews/store/:storeId', async (req, res) => {
  try {
    const { storeId } = req.params;
    const reviews = await prisma.review.findMany({
      where: { fromStoreId: parseInt(storeId) },
      include: { toSupplier: true }
    });
    res.json(reviews);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/reviews', async (req, res) => {
  try {
    const { fromStoreId, toSupplierId, text } = req.body;
    
    if (!fromStoreId || !toSupplierId || !text) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã: fromStoreId, toSupplierId, text' });
    }

    const review = await prisma.review.create({
      data: { 
        fromStoreId: parseInt(fromStoreId), 
        toSupplierId: parseInt(toSupplierId), 
        text 
      },
      include: {
        fromStore: true,
        toSupplier: true
      }
    });
    res.json(review);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.put('/reviews/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { text } = req.body;
    
    const updated = await prisma.review.update({
      where: { id: parseInt(id) },
      data: { text },
      include: {
        fromStore: true,
        toSupplier: true
      }
    });
    res.json(updated);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.delete('/reviews/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await prisma.review.delete({ 
      where: { id: parseInt(id) } 
    });
    res.json(deleted);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// -------------------- –°–û–û–ë–©–ï–ù–ò–Ø –ü–û–î–î–ï–†–ñ–ö–ò --------------------
app.get('/support-messages', async (req, res) => {
  try {
    const messages = await prisma.supportMessage.findMany({ 
      include: { 
        fromStore: true, 
        fromSupplier: true 
      } 
    });
    res.json(messages);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/support-messages/store/:storeId', async (req, res) => {
  try {
    const { storeId } = req.params;
    const messages = await prisma.supportMessage.findMany({
      where: { fromStoreId: parseInt(storeId) },
      include: { fromStore: true }
    });
    res.json(messages);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/support-messages/supplier/:supplierId', async (req, res) => {
  try {
    const { supplierId } = req.params;
    const messages = await prisma.supportMessage.findMany({
      where: { fromSupplierId: parseInt(supplierId) },
      include: { fromSupplier: true }
    });
    res.json(messages);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/support-messages/store', async (req, res) => {
  try {
    const { fromStoreId, text } = req.body;
    
    if (!fromStoreId || !text) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã: fromStoreId, text' });
    }

    const message = await prisma.supportMessage.create({
      data: { 
        fromStoreId: parseInt(fromStoreId), 
        fromSupplierId: null,
        text 
      },
      include: {
        fromStore: true
      }
    });
    res.json(message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/support-messages/supplier', async (req, res) => {
  try {
    const { fromSupplierId, text } = req.body;
    
    if (!fromSupplierId || !text) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã: fromSupplierId, text' });
    }

    const message = await prisma.supportMessage.create({
      data: { 
        fromStoreId: null,
        fromSupplierId: parseInt(fromSupplierId), 
        text 
      },
      include: {
        fromSupplier: true
      }
    });
    res.json(message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.delete('/support-messages/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await prisma.supportMessage.delete({ 
      where: { id: parseInt(id) } 
    });
    res.json(deleted);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// -------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò –ù–ê –°–ö–õ–ê–î–ï --------------------

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–ª–∞–¥–∞ (–ø—Ä–æ–¥–∞—Ç—å)
app.delete('/warehouse-products/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    const productOnWarehouse = await prisma.productOnWarehouse.findUnique({
      where: { id: parseInt(id) },
      include: {
        warehouse: true
      }
    });

    if (!productOnWarehouse) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    await prisma.productOnWarehouse.delete({
      where: { id: parseInt(id) }
    });

    const updatedWarehouse = await prisma.warehouse.update({
      where: { id: productOnWarehouse.warehouseId },
      data: {
        productCount: {
          decrement: 1
        }
      }
    });

    res.json({ 
      message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —Å–æ —Å–∫–ª–∞–¥–∞',
      warehouse: updatedWarehouse 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å–æ —Å–∫–ª–∞–¥–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞
app.post('/warehouse-products/bulk-delete', async (req, res) => {
  try {
    const { warehouseIds } = req.body;
    
    if (!warehouseIds || !Array.isArray(warehouseIds)) {
      return res.status(400).json({ error: '–ú–∞—Å—Å–∏–≤ warehouseIds –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const productsOnWarehouse = await prisma.productOnWarehouse.findMany({
      where: {
        id: {
          in: warehouseIds.map(id => parseInt(id))
        }
      },
      include: {
        warehouse: true
      }
    });

    if (productsOnWarehouse.length === 0) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
    }

    const warehouseGroups = {};
    productsOnWarehouse.forEach(item => {
      const warehouseId = item.warehouseId;
      if (!warehouseGroups[warehouseId]) {
        warehouseGroups[warehouseId] = {
          count: 0,
          warehouse: item.warehouse
        };
      }
      warehouseGroups[warehouseId].count++;
    });

    await prisma.productOnWarehouse.deleteMany({
      where: {
        id: {
          in: warehouseIds.map(id => parseInt(id))
        }
      }
    });

    for (const [warehouseId, group] of Object.entries(warehouseGroups)) {
      await prisma.warehouse.update({
        where: { id: parseInt(warehouseId) },
        data: {
          productCount: {
            decrement: group.count
          }
        }
      });
    }

    res.json({ 
      message: `–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${productsOnWarehouse.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞`,
      removedCount: productsOnWarehouse.length
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–µ –º–∞–≥–∞–∑–∏–Ω–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
app.get('/warehouses/store/:storeId/products-grouped', async (req, res) => {
  try {
    const { storeId } = req.params;
    
    console.log('üîß –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞:', storeId);

    const storeIdNum = parseInt(storeId);
    if (isNaN(storeIdNum)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –º–∞–≥–∞–∑–∏–Ω–∞' });
    }

    const warehouse = await prisma.warehouse.findFirst({
      where: { storeId: storeIdNum },
      include: { 
        products: {
          include: {
            product: true
          }
        }
      }
    });

    if (!warehouse) {
      console.log('‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞:', storeId);
      return res.status(404).json({ error: '–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    console.log('‚úÖ –°–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω —Å —Ç–æ–≤–∞—Ä–∞–º–∏:', warehouse.products.length);

    const groupedProducts = {};
    
    warehouse.products.forEach(productOnWarehouse => {
      const product = productOnWarehouse.product;
      const key = `${product.name}_${product.description}_${product.expiration}_${product.price}_${product.photo || ''}`;
      
      if (groupedProducts[key]) {
        groupedProducts[key].count += 1;
        groupedProducts[key].warehouseIds.push(productOnWarehouse.id);
      } else {
        groupedProducts[key] = {
          product: product,
          count: 1,
          warehouseIds: [productOnWarehouse.id],
          firstWarehouseId: productOnWarehouse.id
        };
      }
    });

    const result = {
      warehouse: warehouse,
      groupedProducts: Object.values(groupedProducts)
    };

    console.log('üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', result.groupedProducts.length);
    res.json(result);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å–∫–ª–∞–¥–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
  }
});

// -------------------- –°–ï–†–í–ï–† --------------------
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});